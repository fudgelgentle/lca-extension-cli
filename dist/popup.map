{"version":3,"file":"popup.js","mappingssources":["webpack://lca-extension-cli/./src/popup.js"],"sourcesContent":["(function () {\n  window.addEventListener(\"load\", init);\n\n  function init() {\n    displayPhoneSpecEmissions();\n    handlePhoneCompare();\n    handlePhoneSearch();\n\n    const closeExtension = document.querySelector(\".close-container\");\n    closeExtension.addEventListener(\"click\", () => {\n      window.close();\n    });\n  }\n\n  // Handles searching for a phone model from the database\n  function handlePhoneSearch() {\n    const searchInput = document.getElementById(\"search-phone\");\n    searchInput.addEventListener(\"keyup\", search);\n  }\n\n  // Searches the phone model from the database\n  function search() {\n    let input = document.getElementById(\"search-phone\");\n    let filter = input.value.toUpperCase();\n    let container = document.querySelector(\".phone-model-container\");\n    const children = container.children;\n    for (let i = 0; i < children.length; i++) {\n      let textValue = children[i].textContent || children[i].innerText;\n      if (textValue.toUpperCase().indexOf(filter) > -1) {\n        children[i].style.display = \"\";\n      } else {\n        children[i].style.display = \"none\";\n      }\n    }\n  }\n\n  /**\n   * Handles the interaction of the phone comparison, including the compare and close button\n   */\n  function handlePhoneCompare() {\n    const compareBtn = document.querySelector(\".compare-btn\");\n    const comparePhone = document.querySelector(\".compare-phone\");\n    const compareContainer = document.querySelector(\".compare-container\");\n    const slideContent = document.querySelector(\".slide-content\");\n\n    compareBtn.addEventListener(\"click\", async () => {\n      await populatePhoneModel();\n      comparePhone.classList.add(\"down\");\n      compareContainer.classList.add(\"hide\");\n      slideContent.classList.add(\"slide-down\");\n      handleSideBySideSelection();\n    });\n\n    const closeBtn = document.querySelector(\".close-phone-btn\");\n    closeBtn.addEventListener(\"click\", () => {\n      comparePhone.classList.remove(\"down\");\n      compareContainer.classList.remove(\"hide\");\n      slideContent.classList.remove(\"slide-down\");\n    });\n  }\n\n  // Handles the selection of a phone model in the list\n  function handleSideBySideSelection() {\n    const phoneNodeList = document.querySelector(\".phone-model-container\").children;\n    Array.from(phoneNodeList).forEach((phone) => {\n      phone.addEventListener(\"click\", (event) => {\n        const phoneId = parseInt(event.target.id);\n\n        const comparePhone = document.querySelector(\".compare-phone\");\n        const compareContainer = document.querySelector(\".compare-container\");\n        const slideContent = document.querySelector(\".slide-content\");\n        comparePhone.classList.remove(\"down\");\n        compareContainer.classList.remove(\"hide\");\n        slideContent.classList.remove(\"slide-down\");\n\n        displaySideBySideComparison(phoneId);\n      });\n    });\n  }\n\n  /**\n   * Function to create aligned storage arrays from arrays of objects\n   * Example input:\n   *  arr1 = [{ storage: '256GB', co2e: '12kg' }, { storage: '512GB', co2e: '24kg' }, { storage: '1 TB', co2e: '48kg' }];\n   *  arr2 = [{ storage: '1 TB', co2e: '48kg' }];\n   * @param {Array} arr1 An array object containing storage and co2e of a device\n   * @param {Array} arr2 An array object containing storage and co2e of a device\n   * @returns // Example Output:\n              // [\n              //   [ { storage: '--', co2e: '--' }, { storage: '256GB', co2e: '12kg' }, { storage: '512GB', co2e: '24kg' }, { storage: '1 TB', co2e: '48kg' }, { storage: '2 TB', co2e: '96kg' } ],\n              //   [ { storage: '128GB', co2e: '6kg' }, { storage: '256GB', co2e: '12kg' }, { storage: '512GB', co2e: '24kg' }, { storage: '1 TB', co2e: '48kg' }, { storage: '--', co2e: '--' } ]\n              // ]\n   */\n  function alignStorageArrays(arr1, arr2) {\n    // Extract unique storage values from both arrays\n    const uniqueStorageValues = new Set([...arr1.map(item => item.storage), ...arr2.map(item => item.storage)]);\n\n    // Sort the unique storage values\n    const sortedStorageValues = Array.from(uniqueStorageValues).sort((a, b) => toGB(a) - toGB(b));\n\n    // Initialize new aligned arrays with placeholders\n    const newArr1 = [];\n    const newArr2 = [];\n\n    // Align storage values and fill placeholders\n    sortedStorageValues.forEach(value => {\n      const obj1 = arr1.find(item => item.storage === value);\n      const obj2 = arr2.find(item => item.storage === value);\n\n      newArr1.push(obj1 ? obj1 : { storage: value, co2e: '--' });\n      newArr2.push(obj2 ? obj2 : { storage: value, co2e: '--' });\n    });\n\n    for (let i = 0; i < newArr1.length; i++) {\n      if (newArr1[i].co2e == '--') {\n        newArr1[i].storage = '--';\n      }\n      if (newArr2[i].co2e == \"--\") {\n        newArr2[i].storage = \"--\";\n      }\n    }\n\n    return [newArr1, newArr2];\n  }\n\n  // Display a side-by-side carbon emissions comparison of two phones\n  function displaySideBySideComparison(phoneId) {\n    const phoneModelList = importPhoneModel();\n\n    const currentPhone = getSampleData();\n    const comparedPhone = phoneModelList.find((phone) => phone.id === phoneId);\n\n    const wrapper = document.querySelector(\".side-by-side-section\");\n    const phoneSpecContainer = document.querySelector(\".phone-spec-container\");\n\n    let specContainer = document.querySelector('.side-by-side-spec-container');\n    specContainer.innerHTML = \"\";\n    specContainer.innerHTML += `\n      <p class=\"margin-0 side-phone-text fz-16\"><b>${currentPhone.device}</b></p>\n      <p class=\"margin-0 side-phone-text fz-16\"><b>${comparedPhone.device}</b></p>\n      <img src=\"../assets/img/red-trash-icon.png\" class=\"icon-16 trash-btn\" alt=\"remove device\">\n    `;\n\n    let arrayResult = alignStorageArrays(currentPhone.carbonFootprint, comparedPhone.carbonFootprint);\n    let currentArray = arrayResult[0];\n    let comparedArray = arrayResult[1];\n\n    for (let i = 0; i < currentArray.length; i++) {\n      specContainer.innerHTML += `\n        <div class=\"details-container fz-16\">\n          <div class=\"flex-center most-green cg-4\">\n            <p><b>${currentArray[i].storage}</b>&nbsp;</p>\n            ${\n              i === 0\n                ? '<img src=\"../assets/img/most-green-icon.png\" class=\"icon-16\" alt=\"Most eco-friendly option\">'\n                : \"\"\n            }\n          </div>\n          <div class=\"flex-center co2e-data-container pd-8 br-8 cg-4 lexend-reg\">\n            <p class=\"margin-0\">${currentArray[i].co2e}</p>\n          </div>\n        </div>\n        <div class=\"details-container fz-16\">\n          <div class=\"flex-center most-green cg-4\">\n            <p><b>${comparedArray[i].storage}</b>&nbsp;</p>\n            ${\n              i === 0\n                ? '<img src=\"../assets/img/most-green-icon.png\" class=\"icon-16\" alt=\"Most eco-friendly option\">'\n                : \"\"\n            }\n          </div>\n          <div class=\"flex-center co2e-data-container pd-8 br-8 cg-4 lexend-reg\">\n            <p class=\"margin-0\">${comparedArray[i].co2e}</p>\n          </div>\n        </div>\n      `;\n\n      const sidePhoneText = document.querySelector('.side-phone-text');\n      scrollToElement(sidePhoneText);\n    }\n\n    const trashBtn = specContainer.querySelector(\".trash-btn\");\n    trashBtn.addEventListener(\"click\", () => {\n      hideElement(wrapper);\n      showElement(phoneSpecContainer);\n    });\n\n    const lcaBanner = document.querySelector(\".lca-banner\");\n    lcaBanner.insertAdjacentElement(\"afterend\", wrapper);\n\n    if (phoneSpecContainer.classList.contains('hidden')) {\n      hideElement(wrapper);\n      showElement(wrapper);\n    } else {\n      hideElement(phoneSpecContainer);\n      showElement(wrapper);\n    }\n\n  }\n\n  /**\n   * Takes in the storage value and returns a numerical value in gigabytes (e.g. \"256 GB\" --> 256)\n   * @param {String} storage the storage of a phone model (e.g. \"256 GB\", \"1 TB\")\n   */\n  function toGB(storage) {\n    const storageValue = parseFloat(storage);\n    if (storage.includes(\"TB\")) {\n      return storageValue * 1024;\n    } else if (storage.includes(\"GB\")) {\n      return storageValue;\n    } else if (storage.includes(\"MB\")) {\n      return storageValue / 1024;\n    }\n    return storageValue;\n  }\n\n  /**\n   * Populates the phone model that can be used for side-by-side emissions comparison\n   */\n  async function populatePhoneModel() {\n    const phoneModel = importPhoneModel();\n    const phoneModelContainer = document.querySelector(\".phone-model-container\");\n    phoneModelContainer.innerHTML = \"\";\n    phoneModel.forEach((phone, index) => {\n      const phoneElement = document.createElement(\"p\");\n      phoneElement.className = `phone-model-text br-4${\n        index === phoneModel.length - 1 ? \" last\" : \"\"\n      }`;\n      phoneElement.id = phone.id;\n      phoneElement.textContent = phone.device;\n      phoneModelContainer.appendChild(phoneElement);\n    });\n  }\n\n  /**\n   * Returns a JSON Object that contains the phone model and their respective carbon emissions\n   * @returns {JSON} JSON Object\n   */\n  function importPhoneModel() {\n    const phoneModel = [\n      {\n        id: 1,\n        device: \"Samsung Galaxy S24 Ultra\",\n        carbonFootprint: [\n          {\n            storage: \"256 GB\",\n            co2e: \"26 kg CO2e\",\n          },\n          {\n            storage: \"512 GB\",\n            co2e: \"50 kg CO2e\",\n          },\n          {\n            storage: \"1 TB\",\n            co2e: \"98 kg CO2e\",\n          },\n        ],\n      },\n      {\n        id: 2,\n        device: \"Samsung Galaxy Z Flip 5\",\n        carbonFootprint: [\n          {\n            storage: \"256 GB\",\n            co2e: \"22 kg CO2e\",\n          },\n          {\n            storage: \"512 GB\",\n            co2e: \"44 kg CO2e\",\n          },\n        ],\n      },\n      {\n        id: 3,\n        device: \"OnePlus 12R\",\n        carbonFootprint: [\n          {\n            storage: \"128 GB\",\n            co2e: \"18 kg CO2e\",\n          },\n          {\n            storage: \"256 GB\",\n            co2e: \"36 kg CO2e\",\n          },\n        ],\n      },\n      {\n        id: 4,\n        device: \"Google Pixel 8 Pro\",\n        carbonFootprint: [\n          {\n            storage: \"128 GB\",\n            co2e: \"20 kg CO2e\",\n          },\n          {\n            storage: \"256 GB\",\n            co2e: \"40 kg CO2e\",\n          },\n          {\n            storage: \"512 GB\",\n            co2e: \"80 kg CO2e\",\n          },\n        ],\n      },\n    ];\n    return phoneModel;\n  }\n\n  // Displays the carbon emission of the phone being analyzed in the web page.\n  function displayPhoneSpecEmissions() {\n    const data = getSampleData();\n\n    const container = document.querySelector(\".phone-spec-container\");\n    const footprints = data.carbonFootprint;\n    const deviceName = data.device;\n\n    container.innerHTML += `\n      <p class=\"phone-spec-title eco-bold\" id=\"currentPhone\"><b>${deviceName} Carbon Emissions</b></p>\n    `;\n\n    let mostGreenOption = footprints[0];\n    footprints.forEach((option) => {\n      const co2eValue = parseFloat(option.co2e.split(\" \")[0]);\n      const mostGreenCo2eValue = parseFloat(mostGreenOption.co2e.split(\" \")[0]);\n      if (co2eValue < mostGreenCo2eValue) {\n        mostGreenOption = option;\n      }\n    });\n\n    footprints.forEach((option, index) => {\n      const co2eValue = parseFloat(option.co2e.split(\" \")[0]);\n      const mostGreenCo2eValue = parseFloat(mostGreenOption.co2e.split(\" \")[0]);\n      const percentageIncrease =\n        ((co2eValue - mostGreenCo2eValue) / mostGreenCo2eValue) * 100;\n\n      const isMostGreen = option.storage === mostGreenOption.storage;\n      container.innerHTML += `\n        <div class=\"details-container fz-16\" id=${index + '-c'}>\n          <div class=\"flex-center ${isMostGreen ? \"most-green\" : \"\"} cg-4\">\n            <p class=\"eco-bold\"><b>${option.storage} </b>&nbsp;</p>\n            ${\n              isMostGreen\n                ? '<img src=\"../assets/img/most-green-icon.png\" class=\"icon-16\" alt=\"Most eco-friendly option\">'\n                : `<span class=\"red-text fz-12\">(+${percentageIncrease.toFixed(\n                    0\n                  )}% emissions)</span>`\n            }\n          </div>\n          <div class=\"flex-center co2e-data-container pd-8 br-8 cg-4 lexend-reg\">\n            <p class=\"margin-0\">${option.co2e}</p>\n            <img src=\"../assets/img/equivalent-icon.png\" class=\"icon-16\" alt=\"Equivalent to\">\n            <div class=\"flex-center cg-4\">\n              <p class=\"margin-0 grey-text\">${(co2eValue * 0.88).toFixed(\n                1\n              )} kg of trash burned</p>\n              <img src=\"../assets/img/fire-grey-icon.png\" class=\"icon-16\" alt=\"Trash\">\n            </div>\n          </div>\n        </div>\n        `;\n    });\n\n    const phoneSpecContainer = document.querySelector(\".phone-spec-title\");\n    scrollToElement(phoneSpecContainer);\n  }\n\n  function showElement(element) {\n    element.style.display = \"block\";\n    requestAnimationFrame(() => {\n      element.classList.remove(\"hidden\");\n      element.classList.add(\"visible\");\n    });\n  }\n\n  function hideElement(element) {\n    element.classList.remove(\"visible\");\n    element.classList.add(\"hidden\");\n    element.addEventListener('transitionend', function handleTransitionEnd() {\n      if (element.classList.contains(\"hidden\")) {\n        element.style.display = \"none\";\n      }\n      element.removeEventListener(\"transitionend\", handleTransitionEnd);\n    });\n  }\n\n  function scrollToElement(element) {\n    const y = element.getBoundingClientRect().top + window.scrollY;\n    if (isEdge() || isSafari) {\n      element.scrollIntoView();\n    } else {\n      window.scroll({\n        top: y,\n        behavior: \"smooth\",\n      });\n    }\n  }\n\n  function isEdge() {\n    return /Edg/.test(navigator.userAgent);\n  }\n\n  function isSafari() {\n    return /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent);\n  }\n\n  /**\n   * Returns a sample data containing the phone's model, storage, and carbon footprint.\n   * @returns {JSON} a JSON Object\n   */\n  function getSampleData() {\n    return {\n      device: \"iPhone 15 Pro\",\n      carbonFootprint: [\n        {\n          storage: \"128 GB\",\n          co2e: \"12 kg CO2e\",\n        },\n        {\n          storage: \"256 GB\",\n          co2e: \"24 kg CO2e\",\n        },\n        {\n          storage: \"512 GB\",\n          co2e: \"48 kg CO2e\",\n        },\n        {\n          storage: \"1 TB\",\n          co2e: \"96 kg CO2e\",\n        },\n      ],\n    };\n  }\n})();\n\n"],"names":[],"sourceRoot":""}